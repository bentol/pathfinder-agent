// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pathfinder-cm/pathfinder-agent/pfclient (interfaces: Pfclient)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pathfinder-cm/pathfinder-agent/model"
)

// MockPfclient is a mock of Pfclient interface
type MockPfclient struct {
	ctrl     *gomock.Controller
	recorder *MockPfclientMockRecorder
}

// MockPfclientMockRecorder is the mock recorder for MockPfclient
type MockPfclientMockRecorder struct {
	mock *MockPfclient
}

// NewMockPfclient creates a new mock instance
func NewMockPfclient(ctrl *gomock.Controller) *MockPfclient {
	mock := &MockPfclient{ctrl: ctrl}
	mock.recorder = &MockPfclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPfclient) EXPECT() *MockPfclientMockRecorder {
	return m.recorder
}

// FetchContainersFromServer mocks base method
func (m *MockPfclient) FetchContainersFromServer(arg0 string) (*model.ContainerList, error) {
	ret := m.ctrl.Call(m, "FetchContainersFromServer", arg0)
	ret0, _ := ret[0].(*model.ContainerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchContainersFromServer indicates an expected call of FetchContainersFromServer
func (mr *MockPfclientMockRecorder) FetchContainersFromServer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchContainersFromServer", reflect.TypeOf((*MockPfclient)(nil).FetchContainersFromServer), arg0)
}

// MarkContainerAsDeleted mocks base method
func (m *MockPfclient) MarkContainerAsDeleted(arg0, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "MarkContainerAsDeleted", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsDeleted indicates an expected call of MarkContainerAsDeleted
func (mr *MockPfclientMockRecorder) MarkContainerAsDeleted(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsDeleted", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsDeleted), arg0, arg1)
}

// MarkContainerAsProvisionError mocks base method
func (m *MockPfclient) MarkContainerAsProvisionError(arg0, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "MarkContainerAsProvisionError", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsProvisionError indicates an expected call of MarkContainerAsProvisionError
func (mr *MockPfclientMockRecorder) MarkContainerAsProvisionError(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsProvisionError", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsProvisionError), arg0, arg1)
}

// MarkContainerAsProvisioned mocks base method
func (m *MockPfclient) MarkContainerAsProvisioned(arg0, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "MarkContainerAsProvisioned", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsProvisioned indicates an expected call of MarkContainerAsProvisioned
func (mr *MockPfclientMockRecorder) MarkContainerAsProvisioned(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsProvisioned", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsProvisioned), arg0, arg1)
}
